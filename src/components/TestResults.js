import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckCircle, XCircle, Clock, TrendingUp } from 'lucide-react';
const TestResults = ({ tests }) => {
    const passedTests = tests.filter(t => t.status === 'passed').length;
    const failedTests = tests.filter(t => t.status === 'failed').length;
    const totalTests = tests.length;
    const completedTests = passedTests + failedTests;
    const successRate = completedTests > 0 ? (passedTests / completedTests) * 100 : 0;
    const totalDuration = tests.reduce((sum, test) => sum + (test.duration || 0), 0);
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "bg-green-50 p-4 rounded-lg", children: [_jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(CheckCircle, { className: "h-5 w-5 text-green-600" }), _jsx("span", { className: "font-medium text-green-700", children: "Passed" })] }), _jsx("div", { className: "text-2xl font-bold text-green-800", children: passedTests })] }), _jsxs("div", { className: "bg-red-50 p-4 rounded-lg", children: [_jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(XCircle, { className: "h-5 w-5 text-red-600" }), _jsx("span", { className: "font-medium text-red-700", children: "Failed" })] }), _jsx("div", { className: "text-2xl font-bold text-red-800", children: failedTests })] })] }), completedTests > 0 && (_jsxs("div", { className: "bg-purple-50 p-4 rounded-lg", children: [_jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(TrendingUp, { className: "h-5 w-5 text-purple-600" }), _jsx("span", { className: "font-medium text-purple-700", children: "Success Rate" })] }), _jsxs("div", { className: "flex items-center gap-3", children: [_jsxs("div", { className: "text-2xl font-bold text-purple-800", children: [successRate.toFixed(1), "%"] }), _jsx("div", { className: "flex-1 bg-purple-200 rounded-full h-2", children: _jsx("div", { className: "bg-purple-600 h-2 rounded-full transition-all duration-500", style: { width: `${successRate}%` } }) })] })] })), totalDuration > 0 && (_jsxs("div", { className: "bg-gray-50 p-4 rounded-lg", children: [_jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(Clock, { className: "h-5 w-5 text-gray-600" }), _jsx("span", { className: "font-medium text-gray-700", children: "Total Duration" })] }), _jsxs("div", { className: "text-2xl font-bold text-gray-800", children: [totalDuration.toLocaleString(), "ms"] })] })), completedTests > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium text-gray-700 mb-3", children: "Test Details" }), _jsx("div", { className: "space-y-2", children: tests.filter(t => t.status !== 'pending').map((test, index) => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-gray-50 rounded", children: [_jsxs("div", { className: "flex items-center gap-2", children: [test.status === 'passed' ? (_jsx(CheckCircle, { className: "h-4 w-4 text-green-600" })) : (_jsx(XCircle, { className: "h-4 w-4 text-red-600" })), _jsx("span", { className: "text-sm font-medium", children: test.name })] }), test.duration && (_jsxs("span", { className: "text-xs text-gray-500", children: [test.duration, "ms"] }))] }, index))) })] })), completedTests === 0 && (_jsxs("div", { className: "text-center py-8 text-gray-500", children: [_jsx(TrendingUp, { className: "h-12 w-12 mx-auto mb-3 opacity-50" }), _jsx("p", { children: "Test results will appear here" })] }))] }));
};
export default TestResults;
